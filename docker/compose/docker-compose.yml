services:
  postgres:
    image: postgres
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - local_pgdata:/var/lib/postgresql/data
      - ../sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - expenso

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - "5532:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - expenso
    depends_on:
      - postgres

  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    restart: always
    ports:
      - "8080:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${POSTGRES_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${POSTGRES_KEYCLOAK_PASSWORD}
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
    command:
      - "start-dev"
      - "--import-realm"
    volumes:
      - keycloak-data:/var/lib/keycloak
      - ../keycloak/expenso_realm.json:/opt/keycloak/data/import/expenso_realm.json
    networks:
      - expenso
    depends_on:
      - postgres

  expenso:
    image: ${DOCKER_REGISTRY-}expenso
    container_name: expenso
    build:
      context: ../../
      dockerfile: Dockerfile
    restart: always
    ports:
      - "5084:5084"
    environment:
      EfCore__ConnectionParameters__Host: postgres
      EfCore__ConnectionParameters__User: ${POSTGRES_EXPENSO_USER}
      EfCore__ConnectionParameters__Password: ${POSTGRES_EXPENSO_PASSWORD}
      Keycloak__realm: ${EXPENSO_KEYCLOAK_REALM}
      Keycloak__resource: ${EXPENSO_KEYCLOAK_CLIENT_ID}
      Keycloak__auth-server-url: ${EXPENSO_KEYCLOAK_AUTH_SERVER_URL}
      Keycloak__credentials__secret: ${EXPENSO_KEYCLOAK_CREDENTIALS_SECRET}
      ASPNETCORE_ENVIRONMENT: Development
    volumes:
      - expenso-data:/var/lib/expenso
    networks:
      - expenso
    depends_on:
      - keycloak
      - postgres

  blackbox:
    # https://github.com/prometheus/blackbox_exporter/releases
    image: prom/blackbox-exporter:v0.25.0
    container_name: blackbox
    restart: unless-stopped
    ports:
      - "9115:9115"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../blackbox.yml:/etc/blackbox/blackbox.yml
    command: --config.file=/etc/blackbox/blackbox.yml
    networks:
      - expenso
  
  prometheus:
    # https://github.com/prometheus/prometheus/releases
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    depends_on:
      blackbox:
        condition: "service_started"
    networks:
      - expenso

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    image: &tempoImage grafana/tempo:2.5.0
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
  
  tempo:
    # https://github.com/grafana/tempo/releases
    image: *tempoImage
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../tempo.yml:/etc/tempo.yaml
      - tempo:/tmp/tempo
    restart: unless-stopped
    ports:
      - "3200:3200"  # tempo
      - "4007:4317"  # otlp grpc
    depends_on:
      - otel-collector
    networks:
      expenso:
  
  loki:
    # https://github.com/grafana/loki/releases
    image: grafana/loki:2.9.8
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../loki.yml:/etc/loki/local-config.yaml
      - loki:/data/loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    networks:
      expenso:
  
  grafana:
    # https://github.com/grafana/grafana/releases
    image: grafana/grafana:11.0.0
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../grafana/provisioning:/etc/grafana/provisioning #https://grafana.com/docs/grafana/latest/administration/provisioning/
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    user: root
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
      - tempo
      - loki
    networks:
      expenso:
  
  otel-collector:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/releases
    container_name: otel
    hostname: otel
    image: otel/opentelemetry-collector-contrib:0.103.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ../otel.yml:/etc/otel-collector-config.yaml
    restart: unless-stopped
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver
      - "9200:55679"  # zpages
    networks:
      expenso:

volumes:
  local_pgdata:
  pgadmin-data:
  keycloak-data:
  expenso-data:
  loki:
  prometheus:
  tempo:
  grafana-data:

networks:
  expenso:
    driver: bridge
